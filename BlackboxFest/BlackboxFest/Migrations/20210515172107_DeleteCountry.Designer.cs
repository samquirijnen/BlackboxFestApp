// <auto-generated />
using System;
using BlackboxFest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlackboxFest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210515172107_DeleteCountry")]
    partial class DeleteCountry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlackboxFest.Models.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("BlackboxFest.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArtistLongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtistShortDescription")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MusicGenre")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("BlackboxFest.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BlackboxFest.Models.Concert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArtistID")
                        .HasColumnType("int");

                    b.Property<int>("DateID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<int?>("TimeSlotID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistID");

                    b.HasIndex("DateID");

                    b.HasIndex("StageID");

                    b.HasIndex("TimeSlotID");

                    b.ToTable("Concerts");

                    b.HasData(
                        new
                        {
                            Id = 45,
                            DateID = 1,
                            StageID = 1,
                            TimeSlotID = 1
                        },
                        new
                        {
                            Id = 46,
                            DateID = 1,
                            StageID = 2,
                            TimeSlotID = 2
                        },
                        new
                        {
                            Id = 47,
                            DateID = 1,
                            StageID = 1,
                            TimeSlotID = 3
                        },
                        new
                        {
                            Id = 48,
                            DateID = 1,
                            StageID = 1,
                            TimeSlotID = 5
                        },
                        new
                        {
                            Id = 49,
                            DateID = 1,
                            StageID = 1,
                            TimeSlotID = 7
                        },
                        new
                        {
                            Id = 50,
                            DateID = 1,
                            StageID = 1,
                            TimeSlotID = 9
                        },
                        new
                        {
                            Id = 51,
                            DateID = 1,
                            StageID = 2,
                            TimeSlotID = 4
                        },
                        new
                        {
                            Id = 52,
                            DateID = 1,
                            StageID = 2,
                            TimeSlotID = 6
                        },
                        new
                        {
                            Id = 53,
                            DateID = 1,
                            StageID = 2,
                            TimeSlotID = 8
                        },
                        new
                        {
                            Id = 54,
                            DateID = 1,
                            StageID = 2,
                            TimeSlotID = 10
                        },
                        new
                        {
                            Id = 55,
                            DateID = 1,
                            StageID = 3,
                            TimeSlotID = 1
                        },
                        new
                        {
                            Id = 56,
                            DateID = 1,
                            StageID = 3,
                            TimeSlotID = 3
                        },
                        new
                        {
                            Id = 57,
                            DateID = 1,
                            StageID = 3,
                            TimeSlotID = 5
                        },
                        new
                        {
                            Id = 58,
                            DateID = 1,
                            StageID = 3,
                            TimeSlotID = 7
                        },
                        new
                        {
                            Id = 59,
                            DateID = 1,
                            StageID = 3,
                            TimeSlotID = 9
                        },
                        new
                        {
                            Id = 60,
                            DateID = 1,
                            StageID = 3,
                            TimeSlotID = 11
                        },
                        new
                        {
                            Id = 61,
                            DateID = 1,
                            StageID = 4,
                            TimeSlotID = 2
                        },
                        new
                        {
                            Id = 62,
                            DateID = 1,
                            StageID = 4,
                            TimeSlotID = 4
                        },
                        new
                        {
                            Id = 63,
                            DateID = 1,
                            StageID = 4,
                            TimeSlotID = 6
                        },
                        new
                        {
                            Id = 64,
                            DateID = 1,
                            StageID = 4,
                            TimeSlotID = 8
                        },
                        new
                        {
                            Id = 65,
                            DateID = 1,
                            StageID = 4,
                            TimeSlotID = 10
                        },
                        new
                        {
                            Id = 66,
                            DateID = 2,
                            StageID = 1,
                            TimeSlotID = 1
                        },
                        new
                        {
                            Id = 67,
                            DateID = 2,
                            StageID = 1,
                            TimeSlotID = 3
                        },
                        new
                        {
                            Id = 68,
                            DateID = 2,
                            StageID = 1,
                            TimeSlotID = 5
                        },
                        new
                        {
                            Id = 69,
                            DateID = 2,
                            StageID = 1,
                            TimeSlotID = 7
                        },
                        new
                        {
                            Id = 70,
                            DateID = 2,
                            StageID = 1,
                            TimeSlotID = 9
                        },
                        new
                        {
                            Id = 71,
                            DateID = 2,
                            StageID = 1,
                            TimeSlotID = 11
                        },
                        new
                        {
                            Id = 72,
                            DateID = 2,
                            StageID = 2,
                            TimeSlotID = 2
                        },
                        new
                        {
                            Id = 73,
                            DateID = 2,
                            StageID = 2,
                            TimeSlotID = 4
                        },
                        new
                        {
                            Id = 74,
                            DateID = 2,
                            StageID = 2,
                            TimeSlotID = 6
                        },
                        new
                        {
                            Id = 75,
                            DateID = 2,
                            StageID = 2,
                            TimeSlotID = 10
                        },
                        new
                        {
                            Id = 76,
                            DateID = 2,
                            StageID = 3,
                            TimeSlotID = 1
                        },
                        new
                        {
                            Id = 77,
                            DateID = 2,
                            StageID = 3,
                            TimeSlotID = 3
                        },
                        new
                        {
                            Id = 78,
                            DateID = 2,
                            StageID = 3,
                            TimeSlotID = 5
                        },
                        new
                        {
                            Id = 79,
                            DateID = 2,
                            StageID = 3,
                            TimeSlotID = 7
                        },
                        new
                        {
                            Id = 80,
                            DateID = 2,
                            StageID = 3,
                            TimeSlotID = 9
                        },
                        new
                        {
                            Id = 81,
                            DateID = 2,
                            StageID = 3,
                            TimeSlotID = 11
                        },
                        new
                        {
                            Id = 82,
                            DateID = 2,
                            StageID = 4,
                            TimeSlotID = 2
                        },
                        new
                        {
                            Id = 83,
                            DateID = 2,
                            StageID = 4,
                            TimeSlotID = 4
                        },
                        new
                        {
                            Id = 84,
                            DateID = 2,
                            StageID = 4,
                            TimeSlotID = 6
                        },
                        new
                        {
                            Id = 85,
                            DateID = 2,
                            StageID = 4,
                            TimeSlotID = 8
                        },
                        new
                        {
                            Id = 86,
                            DateID = 2,
                            StageID = 4,
                            TimeSlotID = 10
                        },
                        new
                        {
                            Id = 87,
                            DateID = 3,
                            StageID = 1,
                            TimeSlotID = 1
                        },
                        new
                        {
                            Id = 88,
                            DateID = 3,
                            StageID = 1,
                            TimeSlotID = 3
                        },
                        new
                        {
                            Id = 89,
                            DateID = 3,
                            StageID = 1,
                            TimeSlotID = 5
                        },
                        new
                        {
                            Id = 90,
                            DateID = 3,
                            StageID = 1,
                            TimeSlotID = 7
                        },
                        new
                        {
                            Id = 91,
                            DateID = 3,
                            StageID = 1,
                            TimeSlotID = 9
                        },
                        new
                        {
                            Id = 92,
                            DateID = 3,
                            StageID = 1,
                            TimeSlotID = 11
                        },
                        new
                        {
                            Id = 93,
                            DateID = 3,
                            StageID = 2,
                            TimeSlotID = 2
                        },
                        new
                        {
                            Id = 94,
                            DateID = 3,
                            StageID = 2,
                            TimeSlotID = 4
                        },
                        new
                        {
                            Id = 95,
                            DateID = 3,
                            StageID = 2,
                            TimeSlotID = 6
                        },
                        new
                        {
                            Id = 96,
                            DateID = 3,
                            StageID = 2,
                            TimeSlotID = 8
                        },
                        new
                        {
                            Id = 97,
                            DateID = 3,
                            StageID = 2,
                            TimeSlotID = 10
                        },
                        new
                        {
                            Id = 98,
                            DateID = 3,
                            StageID = 3,
                            TimeSlotID = 1
                        },
                        new
                        {
                            Id = 99,
                            DateID = 3,
                            StageID = 3,
                            TimeSlotID = 3
                        },
                        new
                        {
                            Id = 100,
                            DateID = 3,
                            StageID = 3,
                            TimeSlotID = 5
                        },
                        new
                        {
                            Id = 101,
                            DateID = 3,
                            StageID = 3,
                            TimeSlotID = 7
                        },
                        new
                        {
                            Id = 102,
                            DateID = 3,
                            StageID = 3,
                            TimeSlotID = 9
                        },
                        new
                        {
                            Id = 103,
                            DateID = 3,
                            StageID = 3,
                            TimeSlotID = 11
                        },
                        new
                        {
                            Id = 104,
                            DateID = 3,
                            StageID = 4,
                            TimeSlotID = 2
                        },
                        new
                        {
                            Id = 105,
                            DateID = 3,
                            StageID = 4,
                            TimeSlotID = 4
                        },
                        new
                        {
                            Id = 106,
                            DateID = 3,
                            StageID = 4,
                            TimeSlotID = 6
                        },
                        new
                        {
                            Id = 107,
                            DateID = 3,
                            StageID = 4,
                            TimeSlotID = 8
                        },
                        new
                        {
                            Id = 108,
                            DateID = 3,
                            StageID = 4,
                            TimeSlotID = 10
                        });
                });

            modelBuilder.Entity("BlackboxFest.Models.DateDayFestival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DateDayFestival");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = "24/09/2021"
                        },
                        new
                        {
                            Id = 2,
                            Date = "25/09/2021"
                        },
                        new
                        {
                            Id = 3,
                            Date = "26/09/2021"
                        });
                });

            modelBuilder.Entity("BlackboxFest.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("BlackboxFest.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("BlackboxFest.Models.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mainstage"
                        },
                        new
                        {
                            Id = 2,
                            Name = "The Crave"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Technoville"
                        },
                        new
                        {
                            Id = 4,
                            Name = "The Dome"
                        });
                });

            modelBuilder.Entity("BlackboxFest.Models.TicketOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BookingsDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomUserID");

                    b.ToTable("TicketOrders");
                });

            modelBuilder.Entity("BlackboxFest.Models.TicketOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("TicketOrderId")
                        .HasColumnType("int");

                    b.Property<int>("TypeTicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketOrderId");

                    b.HasIndex("TypeTicketId");

                    b.ToTable("TicketOrderDetails");
                });

            modelBuilder.Entity("BlackboxFest.Models.TicketShopCart", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountTypeTickets")
                        .HasColumnType("int");

                    b.Property<string>("CustomUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypeTicketID")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("CustomUserID");

                    b.HasIndex("TypeTicketID");

                    b.ToTable("TicketShopCarts");
                });

            modelBuilder.Entity("BlackboxFest.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TimeSlot");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hour = "12.00-13.30"
                        },
                        new
                        {
                            Id = 2,
                            Hour = "12.30-14.00"
                        },
                        new
                        {
                            Id = 3,
                            Hour = "14.00-15.30"
                        },
                        new
                        {
                            Id = 4,
                            Hour = "14.30-16.00"
                        },
                        new
                        {
                            Id = 5,
                            Hour = "16.00-17.30"
                        },
                        new
                        {
                            Id = 6,
                            Hour = "16.30-18.00"
                        },
                        new
                        {
                            Id = 7,
                            Hour = "18.00-19.30"
                        },
                        new
                        {
                            Id = 8,
                            Hour = "18.30-20.00"
                        },
                        new
                        {
                            Id = 9,
                            Hour = "20.00-21.30"
                        },
                        new
                        {
                            Id = 10,
                            Hour = "20.30-22.00"
                        },
                        new
                        {
                            Id = 11,
                            Hour = "22.00-23.30"
                        });
                });

            modelBuilder.Entity("BlackboxFest.Models.TimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("ConcertId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("ConcertId");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("BlackboxFest.Models.TypeTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TypeTickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Weekend",
                            Price = 180.0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Day",
                            Price = 80.0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Camping",
                            Price = 15.0
                        });
                });

            modelBuilder.Entity("BlackboxFest.Models.UserConcert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConcertId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConcerts");
                });

            modelBuilder.Entity("BlackboxFest.Models.UserNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserNews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BlackboxFest.Models.CustomUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("CustomUser");
                });

            modelBuilder.Entity("BlackboxFest.Models.Adress", b =>
                {
                    b.HasOne("BlackboxFest.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlackboxFest.Models.CustomUser", "CustomUser")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlackboxFest.Models.Concert", b =>
                {
                    b.HasOne("BlackboxFest.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistID");

                    b.HasOne("BlackboxFest.Models.DateDayFestival", "DateDayFestival")
                        .WithMany("Concert")
                        .HasForeignKey("DateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlackboxFest.Models.Stage", "Stage")
                        .WithMany("Concert")
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlackboxFest.Models.TimeSlot", "TimeSlot")
                        .WithMany("Concert")
                        .HasForeignKey("TimeSlotID");
                });

            modelBuilder.Entity("BlackboxFest.Models.News", b =>
                {
                    b.HasOne("BlackboxFest.Models.UserNews", null)
                        .WithMany("News")
                        .HasForeignKey("NewsId");
                });

            modelBuilder.Entity("BlackboxFest.Models.TicketOrder", b =>
                {
                    b.HasOne("BlackboxFest.Models.CustomUser", "CustomUser")
                        .WithMany()
                        .HasForeignKey("CustomUserID");
                });

            modelBuilder.Entity("BlackboxFest.Models.TicketOrderDetail", b =>
                {
                    b.HasOne("BlackboxFest.Models.TicketOrder", "TicketOrder")
                        .WithMany()
                        .HasForeignKey("TicketOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlackboxFest.Models.TypeTicket", "TypeTicket")
                        .WithMany()
                        .HasForeignKey("TypeTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlackboxFest.Models.TicketShopCart", b =>
                {
                    b.HasOne("BlackboxFest.Models.CustomUser", "CustomUser")
                        .WithMany()
                        .HasForeignKey("CustomUserID");

                    b.HasOne("BlackboxFest.Models.TypeTicket", "TypeTicket")
                        .WithMany()
                        .HasForeignKey("TypeTicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlackboxFest.Models.TimeTable", b =>
                {
                    b.HasOne("BlackboxFest.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlackboxFest.Models.Concert", "Concert")
                        .WithMany()
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlackboxFest.Models.UserConcert", b =>
                {
                    b.HasOne("BlackboxFest.Models.Concert", "Concert")
                        .WithMany()
                        .HasForeignKey("ConcertId");

                    b.HasOne("BlackboxFest.Models.CustomUser", "CustomUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BlackboxFest.Models.UserNews", b =>
                {
                    b.HasOne("BlackboxFest.Models.CustomUser", "CustomUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
